{
  "version": 3,
  "sources": ["../src/friendlyTime.ts", "../src/index.ts"],
  "sourcesContent": ["export const friendlyTimeEn = (since: Date, onFriendlyTimeChanged: (newTime: string, originalTime: Date) => void) => {\n\tconst msPassed = Date.now() - since.getTime();\n\tconst setFriendlyTimeTo = (newValue: string, msUntilNextCalculation?: number) => {\n\t\tonFriendlyTimeChanged(newValue, since);\n\t\tif (msUntilNextCalculation != null && msUntilNextCalculation > 0) {\n\t\t\tsetTimeout(() => friendlyTimeEn(since, onFriendlyTimeChanged), msUntilNextCalculation);\n\t\t}\n\t}\n\tconst minuteInMs = 60000;\n\tconst hourInMs = 60 * minuteInMs;\n\tconst dayInMs = 24 * hourInMs;\n\tif (msPassed < minuteInMs) {\n\t\tsetFriendlyTimeTo(`seconds ago`, minuteInMs - msPassed);\n\t} else if (msPassed < hourInMs) {\n\t\tconst minutes = Math.floor(msPassed/minuteInMs);\n\t\tsetFriendlyTimeTo(`${minutes} minute${ minutes > 1 ? 's' : ''} ago`, minuteInMs - (msPassed % minuteInMs));\n\t} else if (msPassed < dayInMs) {\n\t\tconst hours = Math.floor(msPassed/hourInMs);\n\t\tsetFriendlyTimeTo(`${hours} hour${ hours > 1 ? 's' : ''} ago`, hourInMs - (msPassed % hourInMs));\n\t} else if (msPassed < 14 * dayInMs) {\n\t\tconst days = Math.floor(msPassed/dayInMs);\n\t\tsetFriendlyTimeTo(`${days} day${ days > 1 ? 's' : ''} ago`, dayInMs - (msPassed % dayInMs));\n\t} else {\n\t\tsetFriendlyTimeTo(since.toLocaleString('en-US', {dateStyle: \"long\",timeStyle: \"short\"}));\n\t}\n}", "import type {Account, CustomEmoji, Status} from \"./MastodonApiV1Entities.ts\";\nimport {friendlyTimeEn} from \"./friendlyTime.ts\"\n\n// Add \"data-hide-root-post\"\n// Finish root post favourites/boosts\n\ntype ClassName =\n\t\"emoji\" |\n\t\"original-poster\" |\n\t\"fediverse-comment\" |\n\t\t\"comment-header\" |\n\t\t\t\"comment-authors-avatar-link\" |\n\t\t\t\t\"comment-authors-avatar\" |\n\t\t\t\"comment-author\" |\n\t\t\t\t\"comment-authors-display-name\" |\n\t\t\t\t\"comment-authors-fediverse-identity\" |\n\t\t\t\t\t\"at-symbol\" |\n\t\t\t\t\t\"username-at-symbol\" |\n\t\t\t\t\t\"comment-authors-fediverse-username\" |\n\t\t\t\t\t\"server-at-symbol\" |\n\t\t\t\t\t\"comment-authors-fediverse-server\" |\n\t\t\"comment-content\" |\n\t\t\"comment-footer\" |\n\t\t\t\"comment-counters\" |\n\t\t\t\t\"comment-counter-favorites\" |\n\t\t\t\t\"comment-counter-reblogs\" |\n\t\t\t\"comment-time\" |\n\t\t\"comment-replies\"\n;\n\ninterface StatusQuery {\n\thost: string;\n\tstatus: string;\n}\n\ninterface ContextResponseJson {\n\tancestors: Status[];\n\tdescendants: Status[];\n}\n\nconst constructElement = <K extends keyof HTMLElementTagNameMap>(\n\ttag: K,\n\t{attributes = {}, classes=[], children=[], ...passThroughParameters}: {\n\t\tattributes?: {[key: string]: string}, // Partial<Record<keyof HTMLElementTagNameMap[K] | \"itemprop\" | \"itemtype\", string>>\n\t\tclasses?: ClassName[],\n\t\tid?: string,\n\t\ttextContent?: string,\n\t\tinnerHTML?: string,\n\t\tchildren?: Node[],\n\t} = {})=> {\n\tconst e = document.createElement<K>(tag);\n\tObject.entries(attributes).forEach( ([key, value]) =>\n\t\te.setAttribute(key, value) );\n\tclasses.forEach( c => e.classList.add(c) );\n\tfor (const attr of [\"id\", \"textContent\", \"innerHTML\"] as const) {\n\t\tconst value = passThroughParameters[attr];\n\t\tif (value != null) {\n\t\t\te[attr] = value;\n\t\t}\n\t}\n\tchildren.forEach( child => e.appendChild(child) );\n\treturn e;\n} \n\nconst emojify = (html: string, emojis: CustomEmoji[]): string => {\n\tlet emojifiedHtml = html;\n\temojis.forEach(emoji => {\n\n\t\tconst source = constructElement(\"source\", {attributes: {\"srcset\": emoji.url, \"media\": \"(prefers-reduced-motion: no-preference)\"}});\n\n\t\tconst img = constructElement(\"img\", {classes: [\"emoji\"], attributes: {\n\t\t\tsrc: emoji.static_url,\n\t\t\talt: `:${ emoji.shortcode }:`,\n\t\t\ttitle: `:${ emoji.shortcode }:`,\n\t\t}});\n\n\t\tconst picture = constructElement(\"picture\", {children: [source, img]});\n\n\t\temojifiedHtml = emojifiedHtml.replace(`:${ emoji.shortcode }:`, picture.outerHTML);\n\t});\n\treturn emojifiedHtml;\n}\n\nconst DataAttributes = ['host', 'status', 'responsesToUrl', 'include', 'exclude', 'max',  'hideRootStatus', 'display'] as const;\ntype RootDataAttribute = NonNullable<(typeof DataAttributes)[number]>;\n\ntype RootElementDataAttributes = Partial<Record<RootDataAttribute, string>>;\n\nconst fetchJson = async <T>(...args: Parameters<typeof fetch>): Promise<T> => {\n\t\tconst response = await fetch(...args);\n\t\tif (!response.ok) {\n\t\t\t\tthrow new Error(response.statusText);\n\t\t}\n\t\treturn await response.json() as T\n}\n\nconst fetchContext = ({host, status}: StatusQuery) =>\n\tfetchJson<ContextResponseJson>(`https://${host}/api/v1/statuses/${status}/context?limit=1`, {});\n\nconst fetchStatus = async ({host, status}: StatusQuery) =>\n\tfetchJson<Status>(`https://${host}/api/v1/statuses/${status}, {});`);\n\nconst fetchRebloggedBy = async ({host, status}: StatusQuery) =>\n\tfetchJson<Account[]>(`https://${host}/api/v1/statuses/:${status}/reblogged_by, {});`);\n\nconst fetchFavouritedBy = async ({host, status}: StatusQuery) =>\n\tfetchJson<Account[]>(`https://${host}/api/v1/statuses/:${status}/favourited_by, {});`);\n\n// Should take query of the form:\n// https://mastodon.social/@MildlyAggrievedScientist/110826278791052494\n// So that users can just paste URLs\nconst urlToStatusQuery = (statusUrl: string): StatusQuery => {\n const {host, pathname} = new URL(statusUrl);\n const status = pathname.split('/')[2] ?? \"\";//.filter( s => s.length > 0 && !s.startsWith('@') );\n return {host, status}\n}\n\nconst fetchOriginalStatusAndReplies= async (statusQuery: StatusQuery | string) => {\n const query = (typeof statusQuery === \"string\") ? urlToStatusQuery(statusQuery) : statusQuery; \n const [original, context] = await Promise.all([fetchStatus(query), fetchContext(query)]);\n return {original, replies: context.descendants};\n}\n\n\ntype ActionAssociatedWithAccount = \"reblogged\" | \"favourited\";\nconst loadAccountsIntoDom = async (rootElement: HTMLElement) => {\nconst [action, url]: [ActionAssociatedWithAccount, string] = rootElement.dataset['rebloggedUrl'] ?\n\t['reblogged', rootElement.dataset['rebloggedUrl']] :\n\trootElement.dataset['favouritedUrl'] ?\n\t\t['favourited', rootElement.dataset['favouritedUrl'] ??\"\"] :\n\t\t(() => {throw new Error(\"no action found\")})();\n\tconst statusQuery =  urlToStatusQuery(url);\n\tconst accounts = await (action === \"reblogged\" ? fetchRebloggedBy(statusQuery) : fetchFavouritedBy(statusQuery));\n\tif (accounts.length == 0) {\n\n\t} else {\n\n\t}\n}\n\nconst renderComments = (comments: Status[], originalPosterAccount: Account) => {\n\tconst topLevelCommentsElements: HTMLElement[] = [];\n\tconst statusIdToRepliesElement = new Map<string, HTMLElement>();\n\tfor (const comment of comments) {\n\t\tconst isOriginalPoster = comment.account.id === originalPosterAccount.id; \n\t\tconst commentAuthorsFediverseHost = new URL(comment.account.url).hostname;\n\n\t\tconst avatarSource = constructElement('source', {attributes: {\n\t\t\t\"srcset\": comment.account.avatar,\n\t\t\t\"media\": \"(prefers-reduced-motion: no-preference)\",\n\t\t}});\n\n\t\tconst avatarImg = constructElement(\"img\", {classes: [\"comment-authors-avatar\"], attributes: {\n\t\t\tsrc: comment.account.avatar_static,\n\t\t\talt: `@${ comment.account.username }@${ commentAuthorsFediverseHost } avatar`,\n\t\t}});\n\n\t\tconst avatarPicture = constructElement(\"picture\", {children: [avatarSource, avatarImg]});\n\t\tconst avatarLink = constructElement(\"a\", { classes: [\"comment-authors-avatar-link\", ...(isOriginalPoster ? [\"original-poster\"] as const : [])], attributes: {\n\t\t\thref: comment.account.url,\n\t\t\trel: \"external nofollow\",\n\t\t\ttitle: `view profile at @${ comment.account.username }@${ commentAuthorsFediverseHost }`,\n\t\t}, children: [avatarPicture]});\n\n\t\tconst usernameAtElement = constructElement(\"span\", {classes: [\"at-symbol\", \"username-at-symbol\"],\n\t\t\ttextContent: `@`\n\t\t})\n\t\tconst serverAtElement = constructElement(\"span\", {classes: [\"at-symbol\", \"server-at-symbol\"],\n\t\t\ttextContent: `@`\n\t\t}) \n\t\tconst usernameElement = constructElement(\"span\", {classes: [\"comment-authors-fediverse-username\"],\n\t\t\ttextContent: comment.account.username\n\t\t})\n\t\tconst serverElement = constructElement(\"span\", {classes: [\"comment-authors-fediverse-server\"],\n\t\t\ttextContent: commentAuthorsFediverseHost\n\t\t})\n\n\t\tconst displayNameElement = constructElement(\"span\", {classes: [\"comment-authors-display-name\"], innerHTML: emojify(comment.account.display_name, comment.account.emojis), attributes: {\n\t\t\titemprop: \"author\",\n\t\t\titemtype: \"http://schema.org/Person\",\n\t\t}});\n\n\t\tconst fediverseIdentityElement = constructElement(\"a\", {classes: [\"comment-authors-fediverse-identity\", ...(isOriginalPoster ? [\"original-poster\"] as const : [])],\n\t\t\tattributes: {\n\t\t\t\thref: comment.account.url,\n\t\t\t\ttitle: `@${ comment.account.username }@${ commentAuthorsFediverseHost }`,\n\t\t\t\trel: \"external nofollow\",\n\t\t\t},\n\t\t\tchildren: [\n\t\t\t\tusernameAtElement, usernameElement, serverAtElement, serverElement\n\t\t\t]\t\n\t\t});\n\n\t\tconst authorElement = constructElement(\"div\", {\n\t\t\tclasses: [\"comment-author\"],\n\t\t\tchildren: [displayNameElement, fediverseIdentityElement]\n\t\t});\n\n\t\tconst headerElement = constructElement(\"header\", {classes: [\"comment-header\"], children: [avatarLink, authorElement]});\n\n\t\tconst originalStatusLink = constructElement(\"a\", {\n\t\t\ttextContent: \"original post\",\n\t\t\tattributes: {\n\t\t\t\thref: comment.url ?? \"\",\n\t\t\t\titemprop: \"url\",\n\t\t\t\ttitle: `view at ${ commentAuthorsFediverseHost }`,\n\t\t\t\trel: \"external nofollow\",\t\t\n\t\t}});\n\n\n\t\t// copy the content element (non-sanitized, since we're trusting the host server to sanitize it)\n\t\t// if we wanted to sanitize, we could use the [HTML Sanitizer API](https://wicg.github.io/sanitizer-api/),\n\t\t// or [DOMPurify](https://github.com/cure53/DOMPurify/) until there is full browser support for the\n\t\t// the sanitizer API.\n\t\tconst mainContentElement = constructElement(\"main\", {classes: [\"comment-content\"], innerHTML: emojify(comment.content, comment.emojis), attributes: {\n\t\t\titemprop: \"text\",\n\t\t}});\n\n\n\t\tconst timestamp = constructElement(\"time\", {\n\t\t\tclasses: [\"comment-time\"],\n\t\t\tattributes: {dateTime: comment.created_at},\n\t\t\ttextContent: new Date( comment.created_at ).toLocaleString('en-US', {dateStyle: \"long\",timeStyle: \"short\"})\n\t\t})\n\t\tfriendlyTimeEn(new Date( comment.created_at ), (friendlyTimeStr) => {\n\t\t\ttimestamp.textContent = friendlyTimeStr;\n\t\t});\n\n\t\tconst counters = constructElement(\"span\", {\n\t\t\tclasses: [\"comment-counters\"],\n\t\t\tchildren: [\n\t\t\t\t...(comment.reblogs_count > 0 ? [\n\t\t\t\t\tconstructElement(\"a\", {\n\t\t\t\t\t\tclasses: [\"comment-counter-reblogs\"],\n\t\t\t\t\t\ttextContent: `${ comment.reblogs_count}`,\n\t\t\t\t\t\tattributes: {\n\t\t\t\t\t\t\thref: `${ comment.url }/reblogs`,\n\t\t\t\t\t\t\ttitle: `Reblogs reported by ${ commentAuthorsFediverseHost }`,\t\n\t\t\t\t\t}})\n\t\t\t\t] : []),\n\t\t\t\t...(comment.favourites_count > 0 ? [\n\t\t\t\t\tconstructElement(\"a\", {\n\t\t\t\t\t\tclasses: [\"comment-counter-favorites\"],\n\t\t\t\t\t\ttextContent: `${ comment.favourites_count}`,\n\t\t\t\t\t\tattributes: {\n\t\t\t\t\t\t\thref: `${ comment.url }/favourites`,\n\t\t\t\t\t\t\ttitle: `Favorites reported by ${ commentAuthorsFediverseHost }`,\t\n\t\t\t\t\t}})\n\t\t\t\t] : [])\n\t\t\t],\n\t\t})\n\n\t\tconst footerElement = constructElement(\"footer\", {classes:[\"comment-footer\"],\n\t\t\tchildren: [\n\t\t\t\tcounters,\n\t\t\t\toriginalStatusLink,\n\t\t\t\ttimestamp\n\t\t\t],\n\t\t});\n\n\n\t\tconst repliesContainer = constructElement(\"div\", {classes: [\"comment-replies\"]});\n\t\tstatusIdToRepliesElement.set(comment.id, repliesContainer);\n\n\t\tconst commentElement = constructElement(\"article\", {\n\t\t\tid: `comment-${ comment.id }`,\n\t\t\tclasses: [\"fediverse-comment\", ...(isOriginalPoster ? [\"original-poster\"] as const : [])],\n\t\t\tattributes: {\n\t\t\t\titemprop: \"comment\",\n\t\t\t\titemtype: \"http://schema.org/Comment\",\t\t\n\t\t\t},\n\t\t\tchildren: [headerElement, mainContentElement, footerElement, repliesContainer]\n\t\t});\n\n\t\tconst replyBlock = comment.in_reply_to_id != null ? statusIdToRepliesElement.get(comment.in_reply_to_id) : undefined;\n\t\tif (replyBlock) {\n\t\t\treplyBlock.appendChild(commentElement);\n\t\t} else {\n\t\t\ttopLevelCommentsElements.push(commentElement);\n\t\t}\n\t}\n\treturn topLevelCommentsElements;\n}\n\n\n/**\n * \n * @param rootCommentElement \n * @returns \n * \n * Uses node.clone to create each comment, so inline event listeners on those comments (onclick=\"...\") will be copied,\n * but event listeners added via addEventListener() will not.  One could add those after the fact by querying all\n * the comments. \n */\nconst loadCommentsIntoDom = async (rootCommentElement: HTMLElement) => {\n\t// extra data from data attributes\n\tconst dataAttributes = ((rootCommentElement as HTMLElement)?.dataset ?? {}) as RootElementDataAttributes;\n\tconst includeSet = new Set<string>((dataAttributes.include ?? \"\").split(',').map(e => e.trim()));\n\tconst excludeSet = new Set<string>((dataAttributes.exclude ?? \"\").split(',').map(e => e.trim()));\n\tconst maxResponses = parseInt(dataAttributes.max ?? \"\");\n\tconst statusUrl = dataAttributes[\"responsesToUrl\"];\n\tconst {host, status} =  statusUrl != null ? urlToStatusQuery(statusUrl) : dataAttributes;\n\n\t// ensure there is at least a host and status, either from data-host/data-status or extracted from data-responses-to-url\n\tif (host == null || status == null) return;\n\n\t// filter excluded responses out\n\tconst {original, replies} = await fetchOriginalStatusAndReplies({host, status});\n\n\tconst comments = [original, \n\t\t...replies.filter( r => {\n\t\t\tif (excludeSet.has(r.id)) {\n\t\t\t\treturn false;\n\t\t\t} else if (r.in_reply_to_id != null && excludeSet.has(r.in_reply_to_id)) {\n\t\t\t\t// descendants of excluded posts should also be excluded.\n\t\t\t\texcludeSet.add(r.id);\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t})\n\t];\n\t\n\t// filter out responses that exceed length limit (though scrolling is recommended instead)\n\tif (!isNaN(maxResponses)) {\n\t\tfor (var i = comments.length-1; i > 0 && comments.length > maxResponses; i--) {\n\t\t\tif (!includeSet.has(comments[i].id)) {\n\t\t\t\tcomments.splice(i, 1);\n\t\t\t}\n\t\t}\n\t}\n\n\tconst topLevelCommentElements = renderComments(comments, original.account);\n\ttopLevelCommentElements.forEach( commentElement => rootCommentElement.appendChild(commentElement) );\n}\n\nconst findCommentTemplatesAndLoadCommentsIntoDom = () => {\n\tconst commentElements = document.querySelectorAll('[data-host][data-status], [data-responses-to-url]');\n\tfor (const templateElement of commentElements) {\n\t\tif (templateElement instanceof HTMLElement) {\n\t\t\tloadCommentsIntoDom(templateElement);\n\t\t}\n\t}  \n}\n\ndocument.addEventListener('DOMContentLoaded', findCommentTemplatesAndLoadCommentsIntoDom);\n"],
  "mappings": "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",
  "names": ["friendlyTimeEn", "since", "onFriendlyTimeChanged", "msPassed", "setFriendlyTimeTo", "newValue", "msUntilNextCalculation", "minuteInMs", "hourInMs", "dayInMs", "minutes", "hours", "days", "constructElement", "tag", "_a", "_b", "attributes", "classes", "children", "passThroughParameters", "__objRest", "e", "key", "value", "c", "attr", "child", "emojify", "html", "emojis", "emojifiedHtml", "emoji", "source", "img", "picture", "fetchJson", "args", "response", "fetchContext", "host", "status", "fetchStatus", "urlToStatusQuery", "statusUrl", "_a", "host", "pathname", "status", "fetchOriginalStatusAndReplies", "statusQuery", "query", "original", "context", "fetchStatus", "fetchContext", "renderComments", "comments", "originalPosterAccount", "_a", "topLevelCommentsElements", "statusIdToRepliesElement", "comment", "isOriginalPoster", "commentAuthorsFediverseHost", "avatarSource", "constructElement", "avatarImg", "avatarPicture", "avatarLink", "usernameAtElement", "serverAtElement", "usernameElement", "serverElement", "displayNameElement", "emojify", "fediverseIdentityElement", "authorElement", "headerElement", "originalStatusLink", "mainContentElement", "timestamp", "friendlyTimeEn", "friendlyTimeStr", "counters", "footerElement", "repliesContainer", "commentElement", "replyBlock", "loadCommentsIntoDom", "rootCommentElement", "_b", "_c", "_d", "dataAttributes", "includeSet", "e", "excludeSet", "maxResponses", "statusUrl", "host", "status", "urlToStatusQuery", "original", "replies", "fetchOriginalStatusAndReplies", "r", "i", "findCommentTemplatesAndLoadCommentsIntoDom", "commentElements", "templateElement"]
}
